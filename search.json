[{"path":"https://jonathan-columbiau.github.io/lionmap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 lionmap authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Algoo. Author, maintainer.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Algoo J (2024). lionmap: lionmap: tree-based single cell classification algorithmic updates. R package version 0.0.0.9000, https://jonathan-columbiau.github.io/lionmap/, https://github.com/jonathan-columbiau/lionmap.","code":"@Manual{,   title = {lionmap: lionmap: tree-based single cell classification with algorithmic updates},   author = {Jonathan Algoo},   year = {2024},   note = {R package version 0.0.0.9000, https://jonathan-columbiau.github.io/lionmap/},   url = {https://github.com/jonathan-columbiau/lionmap}, }"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/AlignBPCellsObjs.html","id":null,"dir":"Reference","previous_headings":"","what":"Align BPCells Objects so they both have the same genes. — AlignBPCellsObjs","title":"Align BPCells Objects so they both have the same genes. — AlignBPCellsObjs","text":"Align BPCells Objects genes.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/AlignBPCellsObjs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align BPCells Objects so they both have the same genes. — AlignBPCellsObjs","text":"","code":"AlignBPCellsObjs(bpcells_obj1, bpcells_obj2)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/AlignBPCellsObjs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align BPCells Objects so they both have the same genes. — AlignBPCellsObjs","text":"bpcells_obj1 First BPCells Object bpcells_obj2 Second BPCells Object","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/AlignBPCellsObjs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align BPCells Objects so they both have the same genes. — AlignBPCellsObjs","text":"first BPCells object put bpcells_obj1 parameter.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/AlignBPCellsObjs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align BPCells Objects so they both have the same genes. — AlignBPCellsObjs","text":"","code":"bpcells_obj1 = AlignBPCellsObjs(bpcells_obj1, bpcells_obj2) #> Error in BPCells::rowSums(bpcells_obj1) %>% .[. != 0] %>% names(): could not find function \"%>%\" bpcells_obj2 = AlignBPCellsObjs(bpcells_obj2, bpcells_obj1) #> Error in BPCells::rowSums(bpcells_obj1) %>% .[. != 0] %>% names(): could not find function \"%>%\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/Classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification function that takes in input dataset (in BPCells format), alongside\ncreated models and the tree structure and provides a vector of classifications. — Classify","title":"Classification function that takes in input dataset (in BPCells format), alongside\ncreated models and the tree structure and provides a vector of classifications. — Classify","text":"Classification function takes input dataset (BPCells format), alongside created models tree structure provides vector classifications.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/Classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification function that takes in input dataset (in BPCells format), alongside\ncreated models and the tree structure and provides a vector of classifications. — Classify","text":"","code":"Classify(bpcells_query, models, tree_struc, prop_max_threshold = 0.66)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/Classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification function that takes in input dataset (in BPCells format), alongside\ncreated models and the tree structure and provides a vector of classifications. — Classify","text":"bpcells_query Query dataset already aligned reference dataset used find marker genes create models. models Models created GetMarkerGenes function. tree_struc Tree used model creation. prop_max_threshold Proportion evidence required test","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/Classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification function that takes in input dataset (in BPCells format), alongside\ncreated models and the tree structure and provides a vector of classifications. — Classify","text":"vector providing classifications cells bpcells_query order. Performs specific unit testing run . Unit test 1: remaining cells assigned internal nodes Unit test 2: expected number elements returned","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/Classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classification function that takes in input dataset (in BPCells format), alongside\ncreated models and the tree structure and provides a vector of classifications. — Classify","text":"","code":"Classify(query_obj, models, tree) #> Error in tree_struc %>% rootnode() %>% nodelab(tree_struc, .): could not find function \"%>%\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateAllModels.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function that takes in a ge reference dataset that has been transformed\nusing PCA, and a set of celltype labels in factor format, and produces a set of\nmodels used to differentiate celltypes. — CreateAllModels","title":"A helper function that takes in a ge reference dataset that has been transformed\nusing PCA, and a set of celltype labels in factor format, and produces a set of\nmodels used to differentiate celltypes. — CreateAllModels","text":"helper function takes ge reference dataset transformed using PCA, set celltype labels factor format, produces set models used differentiate celltypes.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateAllModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function that takes in a ge reference dataset that has been transformed\nusing PCA, and a set of celltype labels in factor format, and produces a set of\nmodels used to differentiate celltypes. — CreateAllModels","text":"","code":"CreateAllModels(reference_dataset, celltype_labels, models_to_include = NULL)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateAllModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function that takes in a ge reference dataset that has been transformed\nusing PCA, and a set of celltype labels in factor format, and produces a set of\nmodels used to differentiate celltypes. — CreateAllModels","text":"reference_dataset PC-transformed dataset celltype_labels Vector celltype labels models_to_include Optional vector giving model names include. include parameter, include subset following (make sure names match work): \"linear_svm\", \"polynomial_svm\", \"naive_bayes\", \"ridge\", \"lasso\", \"elastic_net\", \"linear_da\", \"knn\", \"rf\", \"quadratic_da\"","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateAllModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function that takes in a ge reference dataset that has been transformed\nusing PCA, and a set of celltype labels in factor format, and produces a set of\nmodels used to differentiate celltypes. — CreateAllModels","text":"List Models","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateAllModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A helper function that takes in a ge reference dataset that has been transformed\nusing PCA, and a set of celltype labels in factor format, and produces a set of\nmodels used to differentiate celltypes. — CreateAllModels","text":"","code":"CreateAllModels(reference_dataset, celltype_labels, models_to_include = NULL) #> Error in CreateAllModels(reference_dataset, celltype_labels, models_to_include = NULL): could not find function \"CreateAllModels\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateEqualTree.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is meant for users who don't want to use the tree-based/hierarchical functionality of the package.\nIt creates a tree that assumes that all the celltype labels are at the same level of the tree. — CreateEqualTree","title":"This function is meant for users who don't want to use the tree-based/hierarchical functionality of the package.\nIt creates a tree that assumes that all the celltype labels are at the same level of the tree. — CreateEqualTree","text":"function meant users want use tree-based/hierarchical functionality package. creates tree assumes celltype labels level tree.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateEqualTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is meant for users who don't want to use the tree-based/hierarchical functionality of the package.\nIt creates a tree that assumes that all the celltype labels are at the same level of the tree. — CreateEqualTree","text":"","code":"CreateEqualTree(cell_labels, rootnode_name = \"Unmapped\")"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateEqualTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is meant for users who don't want to use the tree-based/hierarchical functionality of the package.\nIt creates a tree that assumes that all the celltype labels are at the same level of the tree. — CreateEqualTree","text":"cell_labels Vector celltype labels want create tree . include duplicate celltype labels. rootnode_name Optional parameter giving name rootnode tree. Recommended keep \"Unmapped\".","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateEqualTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is meant for users who don't want to use the tree-based/hierarchical functionality of the package.\nIt creates a tree that assumes that all the celltype labels are at the same level of the tree. — CreateEqualTree","text":"Tree treedata format.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/CreateEqualTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is meant for users who don't want to use the tree-based/hierarchical functionality of the package.\nIt creates a tree that assumes that all the celltype labels are at the same level of the tree. — CreateEqualTree","text":"","code":"CreateEqualTree(celltype_labels) #> Error in paste0(\"(\", str_c(unique(na.omit(cell_labels)), collapse = \",\"),     \")\", rootnode_name, \";\") %>% .[!is.na(.)]: could not find function \"%>%\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/FindMarkerGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds marker genes at each hierarchical level specified by the tree, using the GE matrix\nprovided in the ref_bpcells parameter, and the celltype labels provided in the input to ref_metadata. It\nidentifies marker genes by using a function provided in the BPCells package,\nmarker_features, which finds genes using the Wilcoxon test. — FindMarkerGenes","title":"Finds marker genes at each hierarchical level specified by the tree, using the GE matrix\nprovided in the ref_bpcells parameter, and the celltype labels provided in the input to ref_metadata. It\nidentifies marker genes by using a function provided in the BPCells package,\nmarker_features, which finds genes using the Wilcoxon test. — FindMarkerGenes","text":"Finds marker genes hierarchical level specified tree, using GE matrix provided ref_bpcells parameter, celltype labels provided input ref_metadata. identifies marker genes using function provided BPCells package, marker_features, finds genes using Wilcoxon test.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/FindMarkerGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds marker genes at each hierarchical level specified by the tree, using the GE matrix\nprovided in the ref_bpcells parameter, and the celltype labels provided in the input to ref_metadata. It\nidentifies marker genes by using a function provided in the BPCells package,\nmarker_features, which finds genes using the Wilcoxon test. — FindMarkerGenes","text":"","code":"FindMarkerGenes(   ref_bpcells,   ref_metadata,   tree,   n_genes = 50,   metadata_cluster_column = \"cell_type\",   metadata_cell_label_column = \"cellid\",   n_cells_sampled = 500 )"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/FindMarkerGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds marker genes at each hierarchical level specified by the tree, using the GE matrix\nprovided in the ref_bpcells parameter, and the celltype labels provided in the input to ref_metadata. It\nidentifies marker genes by using a function provided in the BPCells package,\nmarker_features, which finds genes using the Wilcoxon test. — FindMarkerGenes","text":"ref_bpcells GE reference dataset BPCells format. ref_metadata dataframe metadata includes column providing celltype labels used classification column providing cell ids. tree tree structure (treedata format) find marker genes . find marker genes distinguish pairs classes level hierarchy. n_genes Number marker genes, per pairwise class, want find. metadata_cluster_column name column metadata giving celltype labels. metadata_cell_label_column name column metadata giving cell IDs. n_cells_sampled Number cells per class used find marker genes.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/FindMarkerGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds marker genes at each hierarchical level specified by the tree, using the GE matrix\nprovided in the ref_bpcells parameter, and the celltype labels provided in the input to ref_metadata. It\nidentifies marker genes by using a function provided in the BPCells package,\nmarker_features, which finds genes using the Wilcoxon test. — FindMarkerGenes","text":"list providing marker genes distinguish pairwise combination celltypes, level hierarchy tree provided.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/FindMarkerGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds marker genes at each hierarchical level specified by the tree, using the GE matrix\nprovided in the ref_bpcells parameter, and the celltype labels provided in the input to ref_metadata. It\nidentifies marker genes by using a function provided in the BPCells package,\nmarker_features, which finds genes using the Wilcoxon test. — FindMarkerGenes","text":"","code":"FindMarkerGenes(ref_bpcells, ref_metadata) #> Error in test_that(\"ref_metadata is a dataframe (not a tibble)\", {    expect_true(is.data.frame(ref_metadata) & !is.tbl(ref_metadata))}): could not find function \"test_that\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/GetModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that gives models trained to differentiate all pairwise matchups. — GetModels","title":"Function that gives models trained to differentiate all pairwise matchups. — GetModels","text":"Function gives models trained differentiate pairwise matchups.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/GetModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that gives models trained to differentiate all pairwise matchups. — GetModels","text":"","code":"GetModels(   marker_genes,   ref_bpcells,   ref_metadata,   tree,   metadata_cluster_column = \"cluster_label\",   metadata_cell_label_column = \"cell_label\",   n_cells_sampled = 500,   models_to_include = NULL,   npcs = 5 )"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/GetModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that gives models trained to differentiate all pairwise matchups. — GetModels","text":"marker_genes List marker genes returned FindMarkerGenes function. ref_bpcells BPCells obj reference dataset GE values ref_metadata Dataframe metadata cell reference dataset. tree Tree structure treedata format. metadata_cluster_column Metadata celltype label column. metadata_cell_label_column Metadata cell ID column n_cells_sampled Number cells used pairwise model determination class. models_to_include Optional vector provides names models include. using parameter, include subset following (make sure names match work): \"linear_svm\", \"polynomial_svm\", \"naive_bayes\", \"ridge\", \"lasso\", \"elastic_net\", \"linear_da\", \"knn\", \"rf\", \"quadratic_da\" npcs Optional parameter giving number PCs use model creation.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/GetModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that gives models trained to differentiate all pairwise matchups. — GetModels","text":"List models differentiates pairwise matchup.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/GetModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that gives models trained to differentiate all pairwise matchups. — GetModels","text":"","code":"GetModels(marker_genes, ref_bpcells, ref_metadata, tree, metadata_cluster_column = \"cluster_label\", metadata_cell_label_column = \"cell_label\", n_cells_sampled = 500, models_to_include = NULL, npcs = 5) #> Error in test_that(\"ref_metadata is a dataframe (not a tibble)\", {    expect_true(is.data.frame(ref_metadata) & !is.tbl(ref_metadata))}): could not find function \"test_that\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsFromTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function which uses the fread function from the data.table library to\nread in a GE dataset in BPCells format. — LoadBPCellsFromTable","title":"Helper function which uses the fread function from the data.table library to\nread in a GE dataset in BPCells format. — LoadBPCellsFromTable","text":"Helper function uses fread function data.table library read GE dataset BPCells format.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsFromTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function which uses the fread function from the data.table library to\nread in a GE dataset in BPCells format. — LoadBPCellsFromTable","text":"","code":"LoadBPCellsFromTable(filename, dir_name = \"new_dataset\")"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsFromTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function which uses the fread function from the data.table library to\nread in a GE dataset in BPCells format. — LoadBPCellsFromTable","text":"filename Name file dir_name Name BPCells obj","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsFromTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function which uses the fread function from the data.table library to\nread in a GE dataset in BPCells format. — LoadBPCellsFromTable","text":"BPCells-formatted GE matrix","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsFromTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function which uses the fread function from the data.table library to\nread in a GE dataset in BPCells format. — LoadBPCellsFromTable","text":"","code":"LoadBPCellsFromTable(filename, dir_name = \"bpcells_dataset\") #> Error in LoadBPCellsFromTable(filename, dir_name = \"bpcells_dataset\"): could not find function \"LoadBPCellsFromTable\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that loads BPCells obj already created — LoadBPCellsObj","title":"Helper function that loads BPCells obj already created — LoadBPCellsObj","text":"Helper function loads BPCells obj already created","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that loads BPCells obj already created — LoadBPCellsObj","text":"","code":"LoadBPCellsObj(directory_name)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that loads BPCells obj already created — LoadBPCellsObj","text":"directory_name Name directory BPCells Object.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that loads BPCells obj already created — LoadBPCellsObj","text":"BPCells obj","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function that loads BPCells obj already created — LoadBPCellsObj","text":"","code":"LoadBPCellsObj(bpcells_dir_name) #> Error in LoadBPCellsObj(bpcells_dir_name): could not find function \"LoadBPCellsObj\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObjToSeurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that takes in BPCells object and provides Seurat object\nwith this dataset (since Seurat also supports BPCells). — LoadBPCellsObjToSeurat","title":"Helper function that takes in BPCells object and provides Seurat object\nwith this dataset (since Seurat also supports BPCells). — LoadBPCellsObjToSeurat","text":"Helper function takes BPCells object provides Seurat object dataset (since Seurat also supports BPCells).","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObjToSeurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that takes in BPCells object and provides Seurat object\nwith this dataset (since Seurat also supports BPCells). — LoadBPCellsObjToSeurat","text":"","code":"LoadBPCellsObjToSeurat(directory_name, metadata)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObjToSeurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that takes in BPCells object and provides Seurat object\nwith this dataset (since Seurat also supports BPCells). — LoadBPCellsObjToSeurat","text":"directory_name Name directory holding bpcells obj metadata Dataframe metadata BPCells cells","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObjToSeurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that takes in BPCells object and provides Seurat object\nwith this dataset (since Seurat also supports BPCells). — LoadBPCellsObjToSeurat","text":"Seurat object BPCells obj GE matrix","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/LoadBPCellsObjToSeurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function that takes in BPCells object and provides Seurat object\nwith this dataset (since Seurat also supports BPCells). — LoadBPCellsObjToSeurat","text":"","code":"LoadBPCellsObjToSeurat(bpcells_dir, metadata_df) #> Error in LoadBPCellsObjToSeurat(bpcells_dir, metadata_df): could not find function \"LoadBPCellsObjToSeurat\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/WriteSeuratToBPCellsDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to write counts stored in Seurat object in the field\nassays/RNA/counts to bpcells directory — WriteSeuratToBPCellsDir","title":"Helper function to write counts stored in Seurat object in the field\nassays/RNA/counts to bpcells directory — WriteSeuratToBPCellsDir","text":"Helper function write counts stored Seurat object field assays/RNA/counts bpcells directory","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/WriteSeuratToBPCellsDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to write counts stored in Seurat object in the field\nassays/RNA/counts to bpcells directory — WriteSeuratToBPCellsDir","text":"","code":"WriteSeuratToBPCellsDir(seurat_obj, dir_name, cell_label_column = \"cellid\")"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/WriteSeuratToBPCellsDir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to write counts stored in Seurat object in the field\nassays/RNA/counts to bpcells directory — WriteSeuratToBPCellsDir","text":"seurat_obj Seurat object dir_name BPCells directory name write cell_label_column Cell label column name Seurat object metadata","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/WriteSeuratToBPCellsDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to write counts stored in Seurat object in the field\nassays/RNA/counts to bpcells directory — WriteSeuratToBPCellsDir","text":"BPCells GE matrix","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/WriteSeuratToBPCellsDir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to write counts stored in Seurat object in the field\nassays/RNA/counts to bpcells directory — WriteSeuratToBPCellsDir","text":"","code":"WriteSeuratToBPCellsDir(seurat_obj, bpcells_dir, \"cellid\") #> Error in WriteSeuratToBPCellsDir(seurat_obj, bpcells_dir, \"cellid\"): could not find function \"WriteSeuratToBPCellsDir\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_elastic_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial elastic net helper function — binomial_elastic_net","title":"Binomial elastic net helper function — binomial_elastic_net","text":"Binomial elastic net helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_elastic_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial elastic net helper function — binomial_elastic_net","text":"","code":"binomial_elastic_net(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_elastic_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial elastic net helper function — binomial_elastic_net","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_elastic_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial elastic net helper function — binomial_elastic_net","text":"Binomial Elastic Net model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_elastic_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binomial elastic net helper function — binomial_elastic_net","text":"","code":"ex_model = binomial_elastic_net(reference_dataset, celltype_labels) #> Error in binomial_elastic_net(reference_dataset, celltype_labels): could not find function \"binomial_elastic_net\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial lasso helper function — binomial_lasso","title":"Binomial lasso helper function — binomial_lasso","text":"Binomial lasso helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial lasso helper function — binomial_lasso","text":"","code":"binomial_lasso(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial lasso helper function — binomial_lasso","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_lasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial lasso helper function — binomial_lasso","text":"Binomial lasso model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_lasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binomial lasso helper function — binomial_lasso","text":"","code":"ex_model = binomial_lasso(reference_dataset, celltype_labels) #> Error in binomial_lasso(reference_dataset, celltype_labels): could not find function \"binomial_lasso\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_ridge.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial ridge helper function — binomial_ridge","title":"Binomial ridge helper function — binomial_ridge","text":"Binomial ridge helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_ridge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial ridge helper function — binomial_ridge","text":"","code":"binomial_ridge(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_ridge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial ridge helper function — binomial_ridge","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_ridge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial ridge helper function — binomial_ridge","text":"Binomial ridge model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/binomial_ridge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binomial ridge helper function — binomial_ridge","text":"","code":"ex_model = binomial_ridge(reference_dataset, celltype_labels) #> Error in binomial_ridge(reference_dataset, celltype_labels): could not find function \"binomial_ridge\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/knn.html","id":null,"dir":"Reference","previous_headings":"","what":"knn  helper function — knn","title":"knn  helper function — knn","text":"knn  helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"knn  helper function — knn","text":"","code":"knn(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"knn  helper function — knn","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"knn  helper function — knn","text":"knn model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"knn  helper function — knn","text":"","code":"ex_model = knn(reference_dataset, celltype_labels) #> Error in knn(reference_dataset, celltype_labels): could not find function \"knn\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_da.html","id":null,"dir":"Reference","previous_headings":"","what":"linear_da  helper function — linear_da","title":"linear_da  helper function — linear_da","text":"linear_da  helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_da.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"linear_da  helper function — linear_da","text":"","code":"linear_da(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_da.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"linear_da  helper function — linear_da","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_da.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"linear_da  helper function — linear_da","text":"linear_da model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_da.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"linear_da  helper function — linear_da","text":"","code":"ex_model = linear_da(reference_dataset, celltype_labels) #> Error in linear_da(reference_dataset, celltype_labels): could not find function \"linear_da\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_svm.html","id":null,"dir":"Reference","previous_headings":"","what":"linear_svm  helper function — linear_svm","title":"linear_svm  helper function — linear_svm","text":"linear_svm  helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_svm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"linear_svm  helper function — linear_svm","text":"","code":"linear_svm(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_svm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"linear_svm  helper function — linear_svm","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_svm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"linear_svm  helper function — linear_svm","text":"linear_svm model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/linear_svm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"linear_svm  helper function — linear_svm","text":"","code":"ex_model = linear_svm(reference_dataset, celltype_labels) #> Error in linear_svm(reference_dataset, celltype_labels): could not find function \"linear_svm\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/naive_bayes.html","id":null,"dir":"Reference","previous_headings":"","what":"naive_bayes  helper function — naive_bayes","title":"naive_bayes  helper function — naive_bayes","text":"naive_bayes  helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/naive_bayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"naive_bayes  helper function — naive_bayes","text":"","code":"naive_bayes(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/naive_bayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"naive_bayes  helper function — naive_bayes","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/naive_bayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"naive_bayes  helper function — naive_bayes","text":"naive_bayes model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/naive_bayes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"naive_bayes  helper function — naive_bayes","text":"","code":"ex_model = naive_bayes(reference_dataset, celltype_labels) #> Error in naive_bayes(reference_dataset, celltype_labels): could not find function \"naive_bayes\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/pairwise_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that takes in a vector of names, and provides a list with each pairwise combination\nof names. — pairwise_combinations","title":"Helper function that takes in a vector of names, and provides a list with each pairwise combination\nof names. — pairwise_combinations","text":"Helper function takes vector names, provides list pairwise combination names.","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/pairwise_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that takes in a vector of names, and provides a list with each pairwise combination\nof names. — pairwise_combinations","text":"","code":"pairwise_combinations(cluster.names)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/pairwise_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that takes in a vector of names, and provides a list with each pairwise combination\nof names. — pairwise_combinations","text":"cluster.names Vector names/celltype labels","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/pairwise_combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that takes in a vector of names, and provides a list with each pairwise combination\nof names. — pairwise_combinations","text":"List pairwise combinations","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/pairwise_combinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function that takes in a vector of names, and provides a list with each pairwise combination\nof names. — pairwise_combinations","text":"","code":"pairwise_combinations(names_vector) #> Error in pairwise_combinations(names_vector): could not find function \"pairwise_combinations\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/polynomial_svm.html","id":null,"dir":"Reference","previous_headings":"","what":"polynomial_svm  helper function — polynomial_svm","title":"polynomial_svm  helper function — polynomial_svm","text":"polynomial_svm  helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/polynomial_svm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polynomial_svm  helper function — polynomial_svm","text":"","code":"polynomial_svm(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/polynomial_svm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"polynomial_svm  helper function — polynomial_svm","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/polynomial_svm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"polynomial_svm  helper function — polynomial_svm","text":"polynomial_svm model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/polynomial_svm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"polynomial_svm  helper function — polynomial_svm","text":"","code":"ex_model = polynomial_svm(reference_dataset, celltype_labels) #> Error in polynomial_svm(reference_dataset, celltype_labels): could not find function \"polynomial_svm\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/predict_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function returning predicted classifications (formats and returns\nconsistent output forvarious packages) — predict_models","title":"Helper function returning predicted classifications (formats and returns\nconsistent output forvarious packages) — predict_models","text":"Helper function returning predicted classifications (formats returns consistent output forvarious packages)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/predict_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function returning predicted classifications (formats and returns\nconsistent output forvarious packages) — predict_models","text":"","code":"predict_models(model, model_name, nonsparse_mat)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/predict_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function returning predicted classifications (formats and returns\nconsistent output forvarious packages) — predict_models","text":"model model model_name Name model (must one model names package) nonsparse_mat PCA-transformed matrix query dataset","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/predict_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function returning predicted classifications (formats and returns\nconsistent output forvarious packages) — predict_models","text":"Predicted Classifications","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/predict_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function returning predicted classifications (formats and returns\nconsistent output forvarious packages) — predict_models","text":"","code":"predict_models(lasso_model, \"lasso\", pca_transformed_matrix) #> Error in predict_models(lasso_model, \"lasso\", pca_transformed_matrix): could not find function \"predict_models\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/quadratic_da.html","id":null,"dir":"Reference","previous_headings":"","what":"Quadratic discriminant analysis  helper function — quadratic_da","title":"Quadratic discriminant analysis  helper function — quadratic_da","text":"Quadratic discriminant analysis  helper function","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/quadratic_da.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quadratic discriminant analysis  helper function — quadratic_da","text":"","code":"quadratic_da(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/quadratic_da.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quadratic discriminant analysis  helper function — quadratic_da","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/quadratic_da.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quadratic discriminant analysis  helper function — quadratic_da","text":"quadratic_da model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/quadratic_da.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quadratic discriminant analysis  helper function — quadratic_da","text":"","code":"ex_model = quadratic_da(reference_dataset, celltype_labels) #> Error in quadratic_da(reference_dataset, celltype_labels): could not find function \"quadratic_da\""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/random_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Forest  helper function (uses ranger backend) — random_forest","title":"Random Forest  helper function (uses ranger backend) — random_forest","text":"Random Forest  helper function (uses ranger backend)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/random_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Forest  helper function (uses ranger backend) — random_forest","text":"","code":"random_forest(reference_dataset, celltype_labels)"},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/random_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Forest  helper function (uses ranger backend) — random_forest","text":"reference_dataset PC-transformed dataset matrix form celltype_labels Celltype labels vector","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/random_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Forest  helper function (uses ranger backend) — random_forest","text":"rf model trained evenly split dataset (upsamples classes evenly split)","code":""},{"path":"https://jonathan-columbiau.github.io/lionmap/reference/random_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Forest  helper function (uses ranger backend) — random_forest","text":"","code":"ex_model = random_forest(reference_dataset, celltype_labels) #> Error in random_forest(reference_dataset, celltype_labels): could not find function \"random_forest\""}]
