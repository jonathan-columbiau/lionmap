% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Get_Classification_Probabilities.R
\name{Get_Classification_Probabilities}
\alias{Get_Classification_Probabilities}
\title{Classification function that takes in input dataset (in BPCells format), alongside
created models and the tree structure and provides a vector of classifications.}
\usage{
Get_Classification_Probabilities(bpcells_query, models, tree_struc)
}
\arguments{
\item{bpcells_query}{Query dataset already aligned to reference dataset used to find marker genes and create models.}

\item{models}{Models created through GetMarkerGenes function.}

\item{tree}{Tree used in model creation.}
}
\value{
A vector providing classifications of cells in bpcells_query in the same order.
Performs specific unit testing on each run through.
Unit test 1: all remaining cells assigned to internal nodes
Unit test 2: expected number of elements returned
}
\description{
Classification function that takes in input dataset (in BPCells format), alongside
created models and the tree structure and provides a vector of classifications.
}
\examples{
data("train_ex_data_bpcells")
data("train_ex_metadata")
data("test_ex_data_bpcells")
data("test_ex_metadata")
possible_cell_classes = train_ex_metadata$seurat_annotations \%>\% unique()
equal_tree = CreateEqualTree(cell_labels = possible_cell_classes)
marker_genes = FindMarkerGenes(ref_bpcells = train_ex_data_bpcells, ref_metadata = train_ex_metadata, tree = equal_tree, metadata_cluster_column = "seurat_annotations", metadata_cell_id_column = "cell_label")
models <- GetModels(marker_genes = marker_genes, ref_bpcells = train_ex_data_bpcells, ref_metadata = train_ex_metadata, tree = equal_tree, metadata_cluster_column = "seurat_annotations", metadata_cell_label_column = "cell_label")
query_classifications = Get_Classification_Probabilities(bpcells_query = test_ex_data_bpcells,models = models,tree_struc = equal_tree)


change classify so it gives onfidence score at each level of the hierarchy
a cell is classified at.
Returns a dataframe with the following columns for each classification step
performed


}
