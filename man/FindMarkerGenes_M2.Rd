% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FindMarkerGenes_M2.R
\name{FindMarkerGenes_M2}
\alias{FindMarkerGenes_M2}
\title{same as findmarkergenes, but with classifications instead of ref atlas and
returns nothing for marker genes instead of error if not enough tips for a
node on a tree for the pairwise comparisons. And only gets p < p_val_threshold markers.}
\usage{
FindMarkerGenes_M2(
  ref_bpcells,
  ref_metadata,
  tree,
  metadata_cluster_column = "cell_type",
  metadata_cell_id_column = "cellid",
  min_n_cells_sampled = 100,
  max_n_cells_sampled = 5000,
  p_val_threshold = 0.05
)
}
\arguments{
\item{ref_bpcells}{A GE reference dataset in BPCells format.}

\item{ref_metadata}{A dataframe with metadata that includes a column providing
celltype labels used for classification and a column providing cell ids.}

\item{tree}{A tree structure (in treedata format) to find marker genes for. Will find marker genes
that distinguish pairs of classes at each level of the hierarchy.}

\item{metadata_cluster_column}{The name of the column in the metadata giving the celltype labels.}

\item{metadata_cell_id_column}{The name of the column in the metadata giving the cell IDs.}

\item{min_n_cells_sampled}{Minimum  number of cells to find marker genes per class.}

\item{max_n_cells_sampled}{Max number of cells to find marker genes per class if greater than threshold.}

\item{p_val_threshold}{P-value threshold to include marker genes or not.}
}
\value{
A list providing marker genes that distinguish each pairwise
combination of celltypes, significant to the p-value threshold,
at each level of the hierarchy in the tree you provided.
}
\description{
same as findmarkergenes, but with classifications instead of ref atlas and
returns nothing for marker genes instead of error if not enough tips for a
node on a tree for the pairwise comparisons. And only gets p < p_val_threshold markers.
}
\examples{
data("train_ex_data_bpcells")
data("train_ex_metadata")
data("test_ex_data_bpcells")
data("test_ex_metadata")
possible_cell_classes = train_ex_metadata$seurat_annotations \%>\% unique()
equal_tree = CreateEqualTree(cell_labels = possible_cell_classes)
marker_genes = FindMarkerGenes(ref_bpcells = train_ex_data_bpcells, ref_metadata = train_ex_metadata, tree = equal_tree, metadata_cluster_column = "seurat_annotations", metadata_cell_id_column = "cell_label")
}
